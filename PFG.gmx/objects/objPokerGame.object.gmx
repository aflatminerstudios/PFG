<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100</depth>
  <persistent>0</persistent>
  <parentName>objGame</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Setup specific game variables
event_inherited(); // Run parent create first

gameName = scrGetGameName(objPokerGame);
character = noone;
player = noone;
baseSpeed = 1;
baseDifficulty = 1;
currentSpeed = baseSpeed;
currentDifficulty = baseDifficulty;

fieldWidth = 256;
fieldHeight = 480;

gridXMax = 5;
gridYMax = 10;
blockXSize = 48;
blockYSize = 48;

blockGrid = ds_grid_create(gridXMax, gridYMax);
cursor = noone;

// Functions called from outside the Game Object
resetGame = scrCreatePokerBoard;
sendMonsterAttack = scrPokerGameReceiveAttack;
gainStarPower = scrNullScript; // not set yet
addScore = scrNullScript; // not set yet
sendAttack = scrNullScript; // not set yet

debug_log("I am Poker Game #" + string(self.id) + ". (objPokerGame Create)");
debug_log("objPokerGame Create 1 finished.");

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Destroy blockGrid object
ds_grid_destroy(blockGrid);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Move cursor via player controls

// Currently used only for moving cards around (i.e. when one is in hand)
var oldXPos = cursor.gridXPos;
var oldYPos = cursor.gridYPos;

if (scrCheckButtonPressed(player, LEFT)) {
  if(cursor.gridXPos - 1 &gt;= 0)
    cursor.gridXPos -= 1;
}

if (scrCheckButtonPressed(player, RIGHT)) {
  if(cursor.gridXPos + 1 &lt; gridXMax)
    cursor.gridXPos += 1;
}

if (scrCheckButtonPressed(player, UP)) {
  if(cursor.gridYPos - 1 &gt;= 0)
    cursor.gridYPos -= 1;
}

if (scrCheckButtonPressed(player, DOWN)) {
  if(cursor.gridYPos + 1 &lt; gridYMax)
    cursor.gridYPos += 1;
}

cursor.x = cursor.gridXPos*blockXSize + x;  // Convert to use function --  Micha TODO
cursor.y = cursor.gridYPos*blockYSize + y;

// If the cursor moved
if(cursor.gridXPos != oldXPos || cursor.gridYPos != oldYPos) {
  // Move held card (swap with new position)
  if(cursor.isHolding) {
    var heldCard = blockGrid[# oldXPos, oldYPos];
    var bumpedCard = blockGrid[# cursor.gridXPos, cursor.gridYPos];
    scrMovePokerCard(heldCard, cursor.gridXPos, cursor.gridYPos, true);
    scrMovePokerCard(bumpedCard, oldXPos, oldYPos, true);
    
    // update location on screen for held card
    heldCard.x = cursor.x;
    heldCard.y = cursor.y;
  }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pick up/put down card using button1
if (scrCheckButtonPressed(player, BUTTON1)) {
  var isNowHoldingCard = cursor.isHolding;
  var pokerCard = blockGrid[# cursor.gridXPos, cursor.gridYPos];
  with (pokerCard) {
    if (isHeld) {
      isHeld = false;
      isNowHoldingCard = false;
    } else {
      isHeld = true;
      isNowHoldingCard = true;
    }
  }
  cursor.isHolding = isNowHoldingCard;
  if(isNowHoldingCard)
    cursor.image_index = 1;
  else
    cursor.image_index = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>524</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_color</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>13</kind>
            <string>32768</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>511</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_draw_rectangle</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>-1</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>fieldWidth</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>fieldHeight</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>524</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_color</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>13</kind>
            <string>16777215</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>511</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_draw_rectangle</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>-1</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>fieldWidth</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>fieldHeight</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
